---
title: "Import and Filter TOC"
format: 
  html:
    toc: true
    toc-location: left
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
    standalone: true
editor: source

---

## Some preliminary setup



```{r}
#| label: setup
#| eval: true
library(LEEF.analysis)
library(LEEF.measurement.toc)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggExtra)
options(dplyr.summarise.inform = FALSE)
```

```{r}
pre_processor_toc("~/Desktop/0.raw.data/", "~/Desktop/1.pre-processed.data/")
extractor_toc("~/Desktop/1.pre-processed.data/", "~/Desktop/2.extracted.data/")
```

## Read parameter and data files and determine CV and number extra measurements
```{r}
#| label: parameter

fns <- sapply(
  list.files("~/Desktop/2.extracted.data/toc/", "data", full.names = FALSE),
  function(fn){
    x <- strsplit(fn, "\\.")[[1]][[1]]
  }
)

data <- lapply(
    fns,
    function(fn){
      p <- read.csv(file.path("~/Desktop/2.extracted.data/toc/", paste(fn, "parameter", "csv", sep = ".")))
      d <- read.csv(file.path("~/Desktop/2.extracted.data/toc/", paste(fn, "data", "csv", sep = ".")))
      return(list(
        data = d, 
        parameter = p, 
        samples = max(p$samples), 
        extra_samples = max(p$extra_samples), 
        max_cv = max(p$max_cv)
      )
      )
    }
)

sapply(data, "[[", "samples") |> plot(ylab = "samples") |> print()
sapply(data, "[[", "extra_samples") |> plot(ylab = "extra_samples") |> print()
sapply(data, "[[", "max_cv") |> plot(ylab = "max_cv") |> print()

samples <- sapply(data, "[[", "samples") |> min()
extra_samples <- sapply(data, "[[", "extra_samples") |> min()
max_cv <- sapply(data, "[[", "max_cv") |> max()

no_samples <- samples + extra_samples
max_col <- (2 + 3 + no_samples * 2) + 1
      
```

## Read data and adjust different number of samples and cv
```{r}
#| label: data
toc <- lapply(
  data,
  function(x){
    result <- x$data[,1:max_col]
    return(result)
  }
) |> do.call(what = rbind)
toc$id <- 1:nrow(toc)
# I DO NOT KNOW HOW TO CONTINUE HERE
```

## Add to database
```{r}
#| eval: false

db <- "LEEF.RRD.TOC.sqlite"
options(RRDdb = db)


unlink(c("~/Desktop/1.pre-processed.data/toc/", "~/Desktop/2.extracted.data/toc/"), recursive = TRUE)
pre_processor_toc("~/Desktop/0.raw.data/", "~/Desktop/1.pre-processed.data/")
extractor_toc("~/Desktop/1.pre-processed.data/", "~/Desktop/2.extracted.data/")
add_to_and_overwrite_table_in_RRD(input = "~/Desktop/2.extracted.data/", dbname = db, overwrite = TRUE)


toc <- LEEF.analysis::db_read_table(table = "toc__toc") %>%
  collect()

toc_original <- toc

# conn <- DBI::dbConnect(
#   drv = RSQLite::SQLite(),
#   db = db
# )
# 
# DBI::dbBegin(conn)
# DBI::dbWriteTable(
#   conn,
#   name = "toc__toc_original",
#   value = toc_original,
#   overwrite = TRUE,
#   append = FALSE
# )
# DBI::dbCommit(conn)
# 
# DBI::dbDisconnect(conn)

toc$id <- 1:nrow(toc)
```



## Remove missing `inj_type`

We have the following measurements files with measurements without inj_type or `NULL.

```{r}
toc %>%
  filter(inj_type == "") %>%
  group_by(filename) %>%
  summarise(n = n()) %>% 
  collect() %>%
  knitr::kable()
```

These can be filtered out

```{r}
before <- nrow(toc)
toc <- toc %>%
  filter(inj_type != "")
after <- nrow(toc)
cat("Before : ", before, "\n")
cat("Removed: ", before - after, "\n")
cat("After  : ", after, "\n")
```

## Rows where `conc == 0`
Here it gets tricky. There are cases, where either `conc_1 == 0` or `conc_2 == 0`, but `conc_3 != 0`, which results in a valid measurement, i.e. `conc != 0`. I would suggest to remove all rows, in which `conc == 0`

```{r}
toc %>%
  filter(conc == 0) %>%
  group_by(filename) %>%
  summarise(n = n()) %>% 
  collect() %>%
  knitr::kable()
```

```{r}
before <- nrow(toc)
toc <- toc %>%
  filter(conc > 0)
after <- nrow(toc)
cat("Before : ", before, "\n")
cat("Removed: ", before - after, "\n")
cat("After  : ", after, "\n")
```

## Check timestamp / id / Filename

In each file, there should be a maximum of 2 timestamps, except of files which contain two timestamps.

```{r}
toc %>%
  select(filename, timestamp, identification, inj_type) %>%
  filter(identification != "H2O" & identification != "2.5mg/lIC") %>%
  group_by(filename, timestamp) %>%
  summarise(timestamps_count = n()) %>%
  group_by(filename) %>%
  summarise(number_of_timestamps = n()) %>%
  arrange(desc(number_of_timestamps)) %>%
  knitr::kable()
```

Fixed two typos in the raw data. Now, it looks OK for me. 

- `LEEF_21_11_12`: "Analysis Name","LEEF_21_11_12 und 21_15_10A.adb"
- `LEEF_22_01_19 und 22_01_21A`: All analysis for 22_01_21 are not valid

## Recalculate `conc`
As the number of additional samples as well as the cv were different for some samples, we have to re-calculate conc and cv. The values which will be used are
- **samples**: `r samples`
- **extra_samples**: `r extra_samples`
- **max_cv**: `r max_cv`
In case there are more extra samples, the last ones were be discarded.

Now we calculate `conc`

```{r}
#| label: calc_conc_cv
conc_ext <- function(c1, c2, c3){
  DETERMINE WHICH ONE TO EXCLUDE!!!!!!  
  (ca + cb) / 2
}

ifelse(
  toc$cv <= max_cv,
  (toc$conc_1 + toc$conc_1) / 2,
  HERE CALCULATION
)

toc$cv <- apply(
  toc[,c("conc_1", "conc_2")],
  1,
  function(x){
    sd(c(x["conc_1"], x["conc_2"])) / mean(c(x["conc_1"], x["conc_2"])) * 100
  }
)
```



## Identify TOC measurements which are based on missing IC or TC measurements
We have to identify and remove the TOC measurements which are using wrong measurements, i.e. TC or IC not available.

The following rows need to be removed:
```{r}
inj_type <- list(
  tc = toc %>%
    filter(inj_type == "TC" & bottle != "") %>%
    select(filename, timestamp, bottle, conc_tc = conc, id_tc = id),
  ic = toc %>%
    filter(inj_type == "IC" & bottle != "") %>%
    select(filename, timestamp, bottle, conc_ic = conc, id_ic = id),
  toc = toc%>%
    filter(inj_type == "TOC" & bottle != "") %>%
    select(filename, timestamp, bottle, conc_toc = conc, id_toc = id),
  tn = toc%>%
    filter(inj_type == "TN" & bottle != "") %>%
    select(filename, timestamp, bottle, conc_tn = conc, id_tn = id)
)
x <- merge(inj_type$tc, inj_type$ic, by = c("filename", "timestamp", "bottle"), all = TRUE)
x <- merge(x, inj_type$toc, by = c("filename", "timestamp", "bottle"), all = TRUE)
x <- merge(x, inj_type$tn, by = c("filename", "timestamp", "bottle"), all = TRUE)
x$TOC <- x$conc_tc - x$conc_ic

i <- x[is.na(x$TOC),"id_toc"]
toc[toc$id %in% i,]
```
These can be filtered out

```{r}
before <- nrow(toc)
toc <- toc %>%
  filter(!(id %in% i))
after <- nrow(toc)
cat("Before : ", before, "\n")
cat("Removed: ", before - after, "\n")
cat("After  : ", after, "\n")
```




## Filter out unrealistic small values
```{r}
toc %>% ggplot(aes(x=conc)) + 
  stat_density(bw = 1) +
  facet_grid(rows = vars(inj_type), scales = "free_y")
```
One can see for TC two peaks clearly separated. The values smaller than 5 will be discarded as they are unrealistically low and can be traced to measuring errors in the machine.

```{r}
toc %>% 
  filter(!(inj_type == "TC" & conc < 5)) %>% 
  ggplot(aes(x=conc)) + 
  stat_density(bw = 1) +
  facet_grid(rows = vars(inj_type), scales = "free_y")
```
These can be filtered out

```{r}
before <- nrow(toc)
toc <- toc %>%
  filter(!(inj_type == "TC" & conc < 5))
after <- nrow(toc)
cat("Before : ", before, "\n")
cat("Removed: ", before - after, "\n")
cat("After  : ", after, "\n")
```

As TOC is calculated as `TC - IC = TOC` we now have to re-calculate the TOC values

```{r}
TOC_calc <- toc %>% 
  mutate(an_id = paste(filename, position)) %>%
  pivot_wider(id_cols = an_id, names_from = inj_type, values_from = conc) %>%
  mutate(TOC_calc = TC - IC) %>%
  select(an_id, TOC_calc) %>%
  mutate(an_id = paste(an_id, "TOC"))

toc <- toc %>% 
  mutate(an_id = paste(filename, position, inj_type)) %>%
  left_join(TOC_calc, by = "an_id") %>%
  mutate( conc = ifelse(inj_type == "TOC", TOC_calc, conc) ) %>%
  select( -TOC_calc, -an_id)
```

And the plot again after re-calculation of the TOC values
```{r}
toc %>% 
  filter(!(inj_type == "TC" & conc < 5)) %>% 
  ggplot(aes(x=conc)) + 
  stat_density(bw = 1, na.rm = TRUE) +
  facet_grid(rows = vars(inj_type), scales = "free_y")
```

## Plot before filtering
Now let's look at the plots of the measurements per bottle per timestep
```{r}
plot_tocs_per_bottle_per_timestamp(db = db, c("TC", "TOC"))
plot_tocs_per_bottle_per_timestamp(db = db, c("IC"))
plot_tocs_per_bottle_per_timestamp(db = db, c("TN"))
```

## Apply the filters to the database

```{r}
#| eval: TRUE
conn <- DBI::dbConnect(
  drv = RSQLite::SQLite(),
  db = db
)

DBI::dbBegin(conn)
DBI::dbWriteTable(
  conn,
  name = "toc__toc",
  value = toc,
  overwrite = TRUE,
  append = FALSE
)
DBI::dbCommit(conn)

DBI::dbDisconnect(conn)
```


## Plot after filtering
Now let's look at the plots of the measurements per bottle per timestep
```{r}
plot_tocs_per_bottle_per_timestamp(db = db, c("TC", "TOC"))
plot_tocs_per_bottle_per_timestamp(db = db, c("IC"))
plot_tocs_per_bottle_per_timestamp(db = db, c("TN"))
```


## Distribution of the individual values per `inj_type`
Calculate the densities
```{r}
conc <- list(
  tc = list(
    original = toc_original$conc[toc$inj_type == "TC" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE),
    removed  = toc$conc[toc$inj_type == "TC" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE)
  ),
  toc = list(
    original = toc_original$conc[toc$inj_type == "TOC" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE),
    removed  = toc$conc[toc$inj_type == "TOC" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE)
  ),
  ic = list(
    original = toc_original$conc[toc$inj_type == "IC" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE),
    removed  = toc$conc[toc$inj_type == "IC" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE)
  ),  
  tn = list(
    original = toc_original$conc[toc$inj_type == "TN" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE),
    removed  = toc$conc[toc$inj_type == "TN" | !is.null(toc$bottle)] |> density(bw = 0.1, na.rm = TRUE)
  )
)
```

### TC

```{r}
plot(conc$tc$removed, col = "red")
lines(conc$tc$original)
```

### TOC

```{r}
plot(conc$toc$removed, col = "red")
lines(conc$toc$original)
```

### IC

```{r}
plot(conc$tc$removed, col = "red")
lines(conc$tc$original)
```

### TN

```{r}
plot(conc$tn$removed, col = "red")
lines(conc$tn$original)
```

## Number of measurements per `timestamp`, `bottle` and `inj_type`

We have to look if there are any duplicate measurements. 

```{r}
dupl <- toc %>%
  group_by(timestamp, bottle, inj_type) %>%
  filter(!is.na(bottle)) %>%
  summarise(fn_1 = min(filename), fn_2 = max(filename), count = n(), min_conc = min(conc), max_conc = max(conc)) %>%
  filter(count > 1 & count < 10) %>%  
  mutate(diff = max_conc - min_conc) %>%
  arrange(inj_type, diff)
dupl %>% 
  group_by(fn_1, fn_2, timestamp) %>%
  summarise() %>%
  arrange(timestamp) %>%
  knitr::kable()
```

And some plots
```{r}
dat <- db_read_toc(db = db, duplicates = NULL) %>% 
  collect()
dat$id <- 1:nrow(dat)
ids <- dat %>% 
  filter(!is.na(bottle)) %>%
  group_by(timestamp, bottle, type) %>%
  summarize(min(id), max(id), n = n()) %>%
  filter(n > 1)
ids <- c(ids$`min(id)`, ids$`max(id)`) |>
  unique()
```

```{r}
pl <- dat %>% 
  filter(id %in% ids) %>%
  ggplot(aes(x=concentration)) + 
  stat_density(bw = 1) +
  facet_grid(rows = vars(type), scales = "free_y")
pl
```

```{r}
x <- dat %>% 
  filter(id %in% ids) %>%
  group_by(day, timestamp, bottle, type) %>%
  summarise(timestamp, bottle, type, mic = min(concentration), mac = max(concentration)) %>%
  mutate(mdiff = mac - mic)

 
pl <- x %>%
  filter(type == "TC") %>%
  ggplot2::ggplot(ggplot2::aes(x = mic, y = mac, colour = type)) +
  ggplot2::geom_point() +
  ggplot2::xlab("Smaler concentration Value") +
  ggplot2::ylab("Larger concentration Value")
  
ggMarginal(pl, type="histogram")
```

```{r}
pl <- x %>%
  filter(type == "IC") %>%
  ggplot2::ggplot(ggplot2::aes(x = mic, y = mac, colour = type)) +
  ggplot2::geom_point() +
  ggplot2::xlab("Smaler concentration Value") +
  ggplot2::ylab("Larger concentration Value")
  
ggMarginal(pl, type="histogram")
```

```{r}
pl <- x %>%
  filter(type == "TOC") %>%
  ggplot2::ggplot(ggplot2::aes(x = mic, y = mac, colour = type)) +
  ggplot2::geom_point() +
  ggplot2::xlab("Smaler concentration Value") +
  ggplot2::ylab("Larger concentration Value")
  
ggMarginal(pl, type="histogram")
```

```{r}
pl <- x %>%
  filter(type == "IC") %>%
  ggplot2::ggplot(ggplot2::aes(x = mic, y = mac, colour = type)) +
  ggplot2::geom_point() +
  ggplot2::xlab("Smaler concentration Value") +
  ggplot2::ylab("Larger concentration Value")
  
ggMarginal(pl, type="histogram")
```



